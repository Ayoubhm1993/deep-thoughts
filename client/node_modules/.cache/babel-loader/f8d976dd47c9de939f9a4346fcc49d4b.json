{"ast":null,"code":"import _classCallCheck from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import decode from'jwt-decode';var AuthService=/*#__PURE__*/function(){function AuthService(){_classCallCheck(this,AuthService);}_createClass(AuthService,[{key:\"getProfile\",value:// retrieve data saved in token\nfunction getProfile(){return decode(this.getToken());}// check if the user is still logged in\n},{key:\"loggedIn\",value:function loggedIn(){// Checks if there is a saved token and it's still valid\nvar token=this.getToken();// use type coersion to check if token is NOT undefined and the token is NOT expired\nreturn!!token&&!this.isTokenExpired(token);}// check if the token has expired\n},{key:\"isTokenExpired\",value:function isTokenExpired(token){try{var decoded=decode(token);if(decoded.exp<Date.now()/1000){return true;}else{return false;}}catch(err){return false;}}// retrieve token from localStorage\n},{key:\"getToken\",value:function getToken(){// Retrieves the user token from localStorage\nreturn localStorage.getItem('id_token');}// set token to localStorage and reload page to homepage\n},{key:\"login\",value:function login(idToken){// Saves user token to localStorage\nlocalStorage.setItem('id_token',idToken);window.location.assign('/');}// clear token from localStorage and force logout with reload\n},{key:\"logout\",value:function logout(){// Clear user token and profile data from localStorage\nlocalStorage.removeItem('id_token');// this will reload the page and reset the state of the application\nwindow.location.assign('/');}}]);return AuthService;}();export default new AuthService();","map":{"version":3,"sources":["C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/src/utils/auth.js"],"names":["decode","AuthService","getToken","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem"],"mappings":"wWAAA,MAAOA,CAAAA,MAAP,KAAmB,YAAnB,C,GAEMC,CAAAA,W,qIACF;AACA,qBAAa,CACX,MAAOD,CAAAA,MAAM,CAAC,KAAKE,QAAL,EAAD,CAAb,CACD,CAED;wBACA,mBAAW,CACT;AACA,GAAMC,CAAAA,KAAK,CAAG,KAAKD,QAAL,EAAd,CACA;AACA,MAAO,CAAC,CAACC,KAAF,EAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB,CACD,CAED;8BACA,wBAAeA,KAAf,CAAsB,CACpB,GAAI,CACF,GAAME,CAAAA,OAAO,CAAGL,MAAM,CAACG,KAAD,CAAtB,CACA,GAAIE,OAAO,CAACC,GAAR,CAAcC,IAAI,CAACC,GAAL,GAAa,IAA/B,CAAqC,CACnC,MAAO,KAAP,CACD,CAFD,IAEO,CACL,MAAO,MAAP,CACD,CACF,CAAC,MAAOC,GAAP,CAAY,CACZ,MAAO,MAAP,CACD,CACF,CAED;wBACA,mBAAW,CACT;AACA,MAAOC,CAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP,CACD,CAED;qBACA,eAAMC,OAAN,CAAe,CACb;AACAF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAiCD,OAAjC,EAEAE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB,EACD,CAED;sBACA,iBAAS,CACP;AACAN,YAAY,CAACO,UAAb,CAAwB,UAAxB,EACA;AACAH,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB,EACD,C,2BAGL,cAAe,IAAIf,CAAAA,WAAJ,EAAf","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n    // retrieve data saved in token\r\n    getProfile() {\r\n      return decode(this.getToken());\r\n    }\r\n  \r\n    // check if the user is still logged in\r\n    loggedIn() {\r\n      // Checks if there is a saved token and it's still valid\r\n      const token = this.getToken();\r\n      // use type coersion to check if token is NOT undefined and the token is NOT expired\r\n      return !!token && !this.isTokenExpired(token);\r\n    }\r\n  \r\n    // check if the token has expired\r\n    isTokenExpired(token) {\r\n      try {\r\n        const decoded = decode(token);\r\n        if (decoded.exp < Date.now() / 1000) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      } catch (err) {\r\n        return false;\r\n      }\r\n    }\r\n  \r\n    // retrieve token from localStorage\r\n    getToken() {\r\n      // Retrieves the user token from localStorage\r\n      return localStorage.getItem('id_token');\r\n    }\r\n  \r\n    // set token to localStorage and reload page to homepage\r\n    login(idToken) {\r\n      // Saves user token to localStorage\r\n      localStorage.setItem('id_token', idToken);\r\n  \r\n      window.location.assign('/');\r\n    }\r\n  \r\n    // clear token from localStorage and force logout with reload\r\n    logout() {\r\n      // Clear user token and profile data from localStorage\r\n      localStorage.removeItem('id_token');\r\n      // this will reload the page and reset the state of the application\r\n      window.location.assign('/');\r\n    }\r\n  }\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}