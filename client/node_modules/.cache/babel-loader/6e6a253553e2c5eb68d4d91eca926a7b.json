{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{QUERY_THOUGHTS,QUERY_ME}from'../../utils/queries';import{useMutation}from'@apollo/react-hooks';import{ADD_THOUGHT}from'../../utils/mutations';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ThoughtForm=function ThoughtForm(){var _useMutation=useMutation(ADD_THOUGHT,{update:function update(cache,_ref){var addThought=_ref.data.addThought;try{// could potentially not exist yet, so wrap in a try...catch\nvar _cache$readQuery=cache.readQuery({query:QUERY_THOUGHTS}),thoughts=_cache$readQuery.thoughts;cache.writeQuery({query:QUERY_THOUGHTS,data:{thoughts:[addThought].concat(_toConsumableArray(thoughts))}});}catch(e){console.error(e);}// update me object's cache, appending new thought to the end of the array\nvar _cache$readQuery2=cache.readQuery({query:QUERY_ME}),me=_cache$readQuery2.me;cache.writeQuery({query:QUERY_ME,data:{me:_objectSpread(_objectSpread({},me),{},{thoughts:[].concat(_toConsumableArray(me.thoughts),[addThought])})}});}}),_useMutation2=_slicedToArray(_useMutation,2),addThought=_useMutation2[0],error=_useMutation2[1].error;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),thoughtText=_useState2[0],setText=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),characterCount=_useState4[0],setCharacterCount=_useState4[1];var handleChange=function handleChange(event){if(event.target.value.length<=280){setText(event.target.value);setCharacterCount(event.target.value.length);}};var handleFormSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();_context.prev=1;_context.next=4;return addThought({variables:{thoughtText:thoughtText}});case 4:// clear form value\nsetText('');setCharacterCount(0);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);console.error(_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function handleFormSubmit(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{className:\"m-0 \".concat(characterCount===280||error?'text-error':''),children:[\"Character Count: \",characterCount,\"/280\",error&&/*#__PURE__*/_jsx(\"span\",{className:\"ml-2\",children:\"Something went wrong...\"})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"flex-row justify-center justify-space-between-md align-stretch\",onSubmit:handleFormSubmit,children:[/*#__PURE__*/_jsx(\"textarea\",{placeholder:\"Here's a new thought...\",value:thoughtText,className:\"form-input col-12 col-md-9\",onChange:handleChange}),/*#__PURE__*/_jsx(\"button\",{className:\"btn col-12 col-md-3\",type:\"submit\",children:\"Submit\"})]})]});};export default ThoughtForm;","map":{"version":3,"sources":["C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/src/components/ThoughtForm/index.js"],"names":["React","useState","QUERY_THOUGHTS","QUERY_ME","useMutation","ADD_THOUGHT","ThoughtForm","update","cache","addThought","data","readQuery","query","thoughts","writeQuery","e","console","error","me","thoughtText","setText","characterCount","setCharacterCount","handleChange","event","target","value","length","handleFormSubmit","preventDefault","variables"],"mappings":"64BAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CAEA,OAASC,cAAT,CAAyBC,QAAzB,KAA0C,qBAA1C,CAEA,OAASC,WAAT,KAA4B,qBAA5B,CACA,OAASC,WAAT,KAA4B,uBAA5B,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,kBAEQF,WAAW,CAACC,WAAD,CAAc,CACvDE,MADuD,iBAChDC,KADgD,MACf,IAAhBC,CAAAA,UAAgB,MAAxBC,IAAwB,CAAhBD,UAAgB,CACtC,GAAI,CACF;AADE,qBAEmBD,KAAK,CAACG,SAAN,CAAgB,CAAEC,KAAK,CAAEV,cAAT,CAAhB,CAFnB,CAEMW,QAFN,kBAEMA,QAFN,CAGFL,KAAK,CAACM,UAAN,CAAiB,CACfF,KAAK,CAAEV,cADQ,CAEfQ,IAAI,CAAE,CAAEG,QAAQ,EAAGJ,UAAH,4BAAkBI,QAAlB,EAAV,CAFS,CAAjB,EAID,CAAC,MAAOE,CAAP,CAAU,CACVC,OAAO,CAACC,KAAR,CAAcF,CAAd,EACD,CAED;AAZsC,sBAavBP,KAAK,CAACG,SAAN,CAAgB,CAAEC,KAAK,CAAET,QAAT,CAAhB,CAbuB,CAa9Be,EAb8B,mBAa9BA,EAb8B,CActCV,KAAK,CAACM,UAAN,CAAiB,CACfF,KAAK,CAAET,QADQ,CAEfO,IAAI,CAAE,CAAEQ,EAAE,gCAAOA,EAAP,MAAWL,QAAQ,8BAAMK,EAAE,CAACL,QAAT,GAAmBJ,UAAnB,EAAnB,EAAJ,CAFS,CAAjB,EAID,CAnBsD,CAAd,CAFnB,8CAEjBA,UAFiB,kBAEHQ,KAFG,kBAEHA,KAFG,eAwBShB,QAAQ,CAAC,EAAD,CAxBjB,wCAwBfkB,WAxBe,eAwBFC,OAxBE,8BAyBsBnB,QAAQ,CAAC,CAAD,CAzB9B,yCAyBfoB,cAzBe,eAyBCC,iBAzBD,eA4BtB,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC1B,GAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAAnB,EAA6B,GAAjC,CAAsC,CACpCP,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP,CACAJ,iBAAiB,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAApB,CAAjB,CACD,CACF,CALH,CAOE,GAAMC,CAAAA,gBAAgB,2FAAG,iBAAMJ,KAAN,kHACvBA,KAAK,CAACK,cAAN,GADuB,sCAIfpB,CAAAA,UAAU,CAAC,CACfqB,SAAS,CAAE,CAAEX,WAAW,CAAXA,WAAF,CADI,CAAD,CAJK,QAQrB;AACAC,OAAO,CAAC,EAAD,CAAP,CACAE,iBAAiB,CAAC,CAAD,CAAjB,CAVqB,+EAYrBN,OAAO,CAACC,KAAR,cAZqB,oEAAH,kBAAhBW,CAAAA,gBAAgB,6CAAtB,CAgBJ,mBACE,oCACG,WAAG,SAAS,eAASP,cAAc,GAAK,GAAnB,EAA0BJ,KAA1B,CAAkC,YAAlC,CAAiD,EAA1D,CAAZ,+BACkBI,cADlB,QAEAJ,KAAK,eAAI,aAAM,SAAS,CAAC,MAAhB,qCAFT,GADH,cAKE,cACA,SAAS,CAAC,gEADV,CAEA,QAAQ,CAAEW,gBAFV,wBAIA,iBACA,WAAW,CAAC,yBADZ,CAEA,KAAK,CAAET,WAFP,CAGA,SAAS,CAAC,4BAHV,CAIA,QAAQ,CAAEI,YAJV,EAJA,cAUE,eAAQ,SAAS,CAAC,qBAAlB,CAAwC,IAAI,CAAC,QAA7C,oBAVF,GALF,GADF,CAsBD,CAzED,CA2EA,cAAejB,CAAAA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { QUERY_THOUGHTS, QUERY_ME  } from '../../utils/queries';\r\n\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { ADD_THOUGHT } from '../../utils/mutations';\r\n\r\nconst ThoughtForm = () => {\r\n\r\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\r\n    update(cache, { data: { addThought } }) {\r\n      try {\r\n        // could potentially not exist yet, so wrap in a try...catch\r\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\r\n        cache.writeQuery({\r\n          query: QUERY_THOUGHTS,\r\n          data: { thoughts: [addThought, ...thoughts] }\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n  \r\n      // update me object's cache, appending new thought to the end of the array\r\n      const { me } = cache.readQuery({ query: QUERY_ME });\r\n      cache.writeQuery({\r\n        query: QUERY_ME,\r\n        data: { me: { ...me, thoughts: [...me.thoughts, addThought] } }\r\n      });\r\n    }\r\n  });\r\n\r\n    const [thoughtText, setText] = useState('');\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    \r\n\r\n    const handleChange = event => {\r\n        if (event.target.value.length <= 280) {\r\n          setText(event.target.value);\r\n          setCharacterCount(event.target.value.length);\r\n        }\r\n      };\r\n\r\n      const handleFormSubmit = async event => {\r\n        event.preventDefault();\r\n        try {\r\n          // add thought to database\r\n          await addThought({\r\n            variables: { thoughtText }\r\n          });\r\n      \r\n          // clear form value\r\n          setText('');\r\n          setCharacterCount(0);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      };\r\n    \r\n  return (\r\n    <div>\r\n       <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\r\n       Character Count: {characterCount}/280\r\n      {error && <span className=\"ml-2\">Something went wrong...</span>}\r\n      </p>\r\n      <form\r\n      className=\"flex-row justify-center justify-space-between-md align-stretch\"\r\n      onSubmit={handleFormSubmit}\r\n      >\r\n      <textarea\r\n      placeholder=\"Here's a new thought...\"\r\n      value={thoughtText}\r\n      className=\"form-input col-12 col-md-9\"\r\n      onChange={handleChange}\r\n      ></textarea>\r\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtForm;"]},"metadata":{},"sourceType":"module"}