{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AYOUB\\\\Desktop\\\\challenges\\\\mern-21\\\\deep-thoughts\\\\client\\\\src\\\\components\\\\ThoughtForm\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { QUERY_THOUGHTS } from '../../utils/queries';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ThoughtForm = () => {\n  _s();\n\n  const [addThought, {\n    error\n  }] = useMutation(ADD_THOUGHT, {\n    update(cache, {\n      data: {\n        addThought\n      }\n    }) {\n      // read what's currently in the cache\n      const {\n        thoughts\n      } = cache.readQuery({\n        query: QUERY_THOUGHTS\n      }); // prepend the newest thought to the front of the array\n\n      cache.writeQuery({\n        query: QUERY_THOUGHTS,\n        data: {\n          thoughts: [addThought, ...thoughts]\n        }\n      });\n    }\n\n  });\n  const [thoughtText, setText] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const handleChange = event => {\n    if (event.target.value.length <= 280) {\n      setText(event.target.value);\n      setCharacterCount(event.target.value.length);\n    }\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      // add thought to database\n      await addThought({\n        variables: {\n          thoughtText\n        }\n      }); // clear form value\n\n      setText('');\n      setCharacterCount(0);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: `m-0 ${characterCount === 280 || error ? 'text-error' : ''}`,\n      children: [\"Character Count: \", characterCount, \"/280\", error && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"ml-2\",\n        children: \"Something went wrong...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex-row justify-center justify-space-between-md align-stretch\",\n      onSubmit: handleFormSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: \"Here's a new thought...\",\n        value: thoughtText,\n        className: \"form-input col-12 col-md-9\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn col-12 col-md-3\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThoughtForm, \"CVvoLou7XRUekyo3Y9HkWVw8sRU=\", false, function () {\n  return [useMutation];\n});\n\n_c = ThoughtForm;\nexport default ThoughtForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThoughtForm\");","map":{"version":3,"sources":["C:/Users/AYOUB/Desktop/challenges/mern-21/deep-thoughts/client/src/components/ThoughtForm/index.js"],"names":["React","useState","QUERY_THOUGHTS","useMutation","ADD_THOUGHT","ThoughtForm","addThought","error","update","cache","data","thoughts","readQuery","query","writeQuery","thoughtText","setText","characterCount","setCharacterCount","handleChange","event","target","value","length","handleFormSubmit","preventDefault","variables","e","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAExB,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA0BJ,WAAW,CAACC,WAAD,EAAc;AACvDI,IAAAA,MAAM,CAACC,KAAD,EAAQ;AAAEC,MAAAA,IAAI,EAAE;AAAEJ,QAAAA;AAAF;AAAR,KAAR,EAAkC;AACtC;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAeF,KAAK,CAACG,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAArB,CAFsC,CAItC;;AACAO,MAAAA,KAAK,CAACK,UAAN,CAAiB;AACfD,QAAAA,KAAK,EAAEX,cADQ;AAEfQ,QAAAA,IAAI,EAAE;AAAEC,UAAAA,QAAQ,EAAE,CAACL,UAAD,EAAa,GAAGK,QAAhB;AAAZ;AAFS,OAAjB;AAID;;AAVsD,GAAd,CAA3C;AAaE,QAAM,CAACI,WAAD,EAAcC,OAAd,IAAyBf,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,CAAD,CAApD;;AAGA,QAAMkB,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAAnB,IAA6B,GAAjC,EAAsC;AACpCP,MAAAA,OAAO,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACAJ,MAAAA,iBAAiB,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,MAApB,CAAjB;AACD;AACF,GALH;;AAOE,QAAMC,gBAAgB,GAAG,MAAMJ,KAAN,IAAe;AACtCA,IAAAA,KAAK,CAACK,cAAN;;AACA,QAAI;AACF;AACA,YAAMnB,UAAU,CAAC;AACfoB,QAAAA,SAAS,EAAE;AAAEX,UAAAA;AAAF;AADI,OAAD,CAAhB,CAFE,CAMF;;AACAC,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,MAAAA,iBAAiB,CAAC,CAAD,CAAjB;AACD,KATD,CASE,OAAOS,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACrB,KAAR,CAAcoB,CAAd;AACD;AACF,GAdD;;AAgBJ,sBACE;AAAA,4BACG;AAAG,MAAA,SAAS,EAAG,OAAMV,cAAc,KAAK,GAAnB,IAA0BV,KAA1B,GAAkC,YAAlC,GAAiD,EAAG,EAAzE;AAAA,sCACkBU,cADlB,UAEAV,KAAK,iBAAI;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFT;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAKE;AACA,MAAA,SAAS,EAAC,gEADV;AAEA,MAAA,QAAQ,EAAEiB,gBAFV;AAAA,8BAIA;AACA,QAAA,WAAW,EAAC,yBADZ;AAEA,QAAA,KAAK,EAAET,WAFP;AAGA,QAAA,SAAS,EAAC,4BAHV;AAIA,QAAA,QAAQ,EAAEI;AAJV;AAAA;AAAA;AAAA;AAAA,cAJA,eAUE;AAAQ,QAAA,SAAS,EAAC,qBAAlB;AAAwC,QAAA,IAAI,EAAC,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAhED;;GAAMd,W;UAE4BF,W;;;KAF5BE,W;AAkEN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { QUERY_THOUGHTS } from '../../utils/queries';\r\n\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { ADD_THOUGHT } from '../../utils/mutations';\r\n\r\nconst ThoughtForm = () => {\r\n\r\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\r\n    update(cache, { data: { addThought } }) {\r\n      // read what's currently in the cache\r\n      const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\r\n  \r\n      // prepend the newest thought to the front of the array\r\n      cache.writeQuery({\r\n        query: QUERY_THOUGHTS,\r\n        data: { thoughts: [addThought, ...thoughts] }\r\n      });\r\n    }\r\n  });\r\n\r\n    const [thoughtText, setText] = useState('');\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    \r\n\r\n    const handleChange = event => {\r\n        if (event.target.value.length <= 280) {\r\n          setText(event.target.value);\r\n          setCharacterCount(event.target.value.length);\r\n        }\r\n      };\r\n\r\n      const handleFormSubmit = async event => {\r\n        event.preventDefault();\r\n        try {\r\n          // add thought to database\r\n          await addThought({\r\n            variables: { thoughtText }\r\n          });\r\n      \r\n          // clear form value\r\n          setText('');\r\n          setCharacterCount(0);\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      };\r\n    \r\n  return (\r\n    <div>\r\n       <p className={`m-0 ${characterCount === 280 || error ? 'text-error' : ''}`}>\r\n       Character Count: {characterCount}/280\r\n      {error && <span className=\"ml-2\">Something went wrong...</span>}\r\n      </p>\r\n      <form\r\n      className=\"flex-row justify-center justify-space-between-md align-stretch\"\r\n      onSubmit={handleFormSubmit}\r\n      >\r\n      <textarea\r\n      placeholder=\"Here's a new thought...\"\r\n      value={thoughtText}\r\n      className=\"form-input col-12 col-md-9\"\r\n      onChange={handleChange}\r\n      ></textarea>\r\n        <button className=\"btn col-12 col-md-3\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThoughtForm;"]},"metadata":{},"sourceType":"module"}